source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "alexherbo2/auto-pairs.kak"

plug "alexherbo2/surround.kak"

plug "aparkerdavid/kakoune-rainbow"

plug "andreyorst/kaktree" config %{
    hook global WinSetOption filetype=kaktree %{
        remove-highlighter buffer/numbers
        remove-highlighter buffer/matching
        remove-highlighter buffer/wrap
        remove-highlighter buffer/show-whitespaces
    }
    kaktree-enable
}

plug "occivink/kakoune-snippets" config %{
  set-option -add global snippets_directories "%opt{plug_install_dir}/kakoune-snippet-collection/snippets"
  #other snippet optons
  }

plug "skewballfox/kakoune-snippet-collection"
#NOTE in case of bug: Removing 
plug "ul/kak-lsp" do %{
    if [[ "$(command -v termux-setup-storage)" ]]; then
        cargo build --release --locked
        cargo install --force --path .
    fi
} config %{
      # uncomment to enable debugging
      # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
      # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

      # this is not necessary; the `lsp-enable-window` will take care of it
      # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}


      set global lsp_diagnostic_line_error_sign '║'
      set global lsp_diagnostic_line_warning_sign '┊'

      define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
      define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
      define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

      define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
      hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
          set-option window lsp_auto_highlight_references true
          set-option window lsp_hover_anchor false
          lsp-auto-hover-enable
          echo -debug "Enabling LSP for filtetype %opt{filetype}"
          lsp-enable-window
      }

      hook global WinSetOption filetype=(rust) %{
          set window lsp_server_configuration rust.clippy_preference="on"
      }
      hook global WinSetOption filetype=rust %{
          hook window BufWritePre .* %{
              evaluate-commands %sh{
                  test -f rustfmt.toml && printf lsp-formatting-sync
              }
          }
      }
      #for python language server
      set-option global lsp_server_configuration pyls.configurationSources=["black"]

      hook global KakEnd .* lsp-exit
}



######################## Editor Behavior ##########################
###################################################################

# indentation
set global tabstop 2
set global indentwidth 4

# replace tab with spaces
hook global InsertChar \t %{ exec -draft -itersel h@ }


####################### Autocompletion ##########################
#################################################################

hook global InsertCompletionShow .* %{
    try %{
        exec -draft 'h<a-K>\h<ret>'
        map window insert <s-tab> <c-p>
        map window insert <tab> <c-n>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

###################### Editor Apperance #########################
#################################################################

# line numbers
add-highlighter global/ number-lines


##################### Language support #########################
################################################################

#Rust
hook global WinSetOption filetype=rust %{
    auto-pairs-enable
    
    set window formatcmd 'rustfmt'
}

#markdown
hook global WinSetOption filetype=markdown %{
    set-option -add buffer auto_pairs_surround _ _ * *
    add-highlighter global/wrap wrap -word
}

#python


hook global WinSetOption filetype=python %{
    set window autowrap_column 80
    auto-pairs-enable
    jedi-enable-autocomplete
    lint-enable
    set-option global lintcmd 'flake8'
}

#C++
hook global WinSetOption filetype=(c|cpp) %{
    auto-pairs-enable
    clang-enable-autocomplete
    clang-enable-diagnostics
    alias window lint clang-parse
    alias window lint-next-error clang-diagnostics-next
}

#Java
#hook global WinSetOption filetype(.java)
